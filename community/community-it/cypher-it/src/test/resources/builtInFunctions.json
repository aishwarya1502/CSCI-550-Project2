[
  {
    "name": "abs",
    "category": "Numeric",
    "description": "Returns the absolute value of an `INTEGER` or `FLOAT`.",
    "signature": "abs(input :: INTEGER | FLOAT) :: INTEGER | FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER | FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "acos",
    "category": "Trigonometric",
    "description": "Returns the arccosine of a `FLOAT` in radians.",
    "signature": "acos(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "all",
    "category": "Predicate",
    "description": "Returns true if the predicate holds for all elements in the given `LIST<ANY>`.",
    "signature": "all(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "variable",
        "description": "variable :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "list",
        "description": "list :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "any",
    "category": "Predicate",
    "description": "Returns true if the predicate holds for at least one element in the given `LIST<ANY>`.",
    "signature": "any(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "variable",
        "description": "variable :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "list",
        "description": "list :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "asin",
    "category": "Trigonometric",
    "description": "Returns the arcsine of a `FLOAT` in radians.",
    "signature": "asin(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "atan",
    "category": "Trigonometric",
    "description": "Returns the arctangent of a `FLOAT` in radians.",
    "signature": "atan(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "atan2",
    "category": "Trigonometric",
    "description": "Returns the arctangent2 of a set of coordinates in radians.",
    "signature": "atan2(y :: FLOAT, x :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "y",
        "description": "y :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      },
      {
        "name": "x",
        "description": "x :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "avg",
    "category": "Aggregating",
    "description": "Returns the average of a set of `INTEGER`, `FLOAT` or `DURATION` values.",
    "signature": "avg(input :: INTEGER | FLOAT | DURATION) :: INTEGER | FLOAT | DURATION",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: INTEGER | FLOAT | DURATION",
        "type": "INTEGER | FLOAT | DURATION",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER | FLOAT | DURATION",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "btrim",
    "category": "String",
    "description": "Returns the given `STRING` with leading and trailing whitespace removed.",
    "signature": "btrim(input :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "btrim",
    "category": "String",
    "description": "Returns the given `STRING` with leading and trailing `trimCharacterString` characters removed.",
    "signature": "btrim(input :: STRING, trimCharacterString :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }, {
        "name" : "trimCharacterString",
        "description" : "trimCharacterString :: STRING",
        "isDeprecated" : false,
        "type" : "STRING"
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "ceil",
    "category": "Numeric",
    "description": "Returns the smallest `FLOAT` that is greater than or equal to a number and equal to an `INTEGER`.",
    "signature": "ceil(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "char_length",
    "category": "Scalar",
    "description": "Returns the number of Unicode characters in a `STRING`.",
    "signature": "char_length(input :: STRING) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "character_length",
    "category": "Scalar",
    "description": "Returns the number of Unicode characters in a `STRING`.",
    "signature": "character_length(input :: STRING) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "coalesce",
    "category": "Scalar",
    "description": "Returns the first non-null value in a list of expressions.",
    "signature": "coalesce(input :: ANY) :: ANY",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ANY",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "collect",
    "category": "Aggregating",
    "description": "Returns a list containing the values returned by an expression.",
    "signature": "collect(input :: ANY) :: LIST<ANY>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<ANY>",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "cos",
    "category": "Trigonometric",
    "description": "Returns the cosine of a `FLOAT`.",
    "signature": "cos(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "cot",
    "category": "Trigonometric",
    "description": "Returns the cotangent of a `FLOAT`.",
    "signature": "cot(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "count",
    "category": "Aggregating",
    "description": "Returns the number of values or rows.",
    "signature": "count(input :: ANY) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "date",
    "category": "Temporal",
    "description": "Creates a `DATE` instant.",
    "signature": "date(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DATE",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "date.realtime",
    "category": "Temporal",
    "description": "Returns the current `DATE` instant using the realtime clock.",
    "signature": "date.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DATE",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "date.statement",
    "category": "Temporal",
    "description": "Returns the current `DATE` instant using the statement clock.",
    "signature": "date.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DATE",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "date.transaction",
    "category": "Temporal",
    "description": "Returns the current `DATE` instant using the transaction clock.",
    "signature": "date.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: DATE",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DATE",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "date.truncate",
    "category": "Temporal",
    "description": "Truncates the given temporal value to a `DATE` instant using the specified unit.",
    "signature": "date.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: DATE",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "unit",
        "description": "unit :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=null, type=MAP}",
        "name": "fields",
        "description": "fields = null :: MAP",
        "type": "MAP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DATE",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "datetime",
    "category": "Temporal",
    "description": "Creates a `ZONED DATETIME` instant.",
    "signature": "datetime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "datetime.fromepoch",
    "category": "Temporal",
    "description": "Creates a `ZONED DATETIME` given the seconds and nanoseconds since the start of the epoch.",
    "signature": "datetime.fromepoch(seconds :: INTEGER | FLOAT, nanoseconds :: INTEGER | FLOAT) :: ZONED DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "seconds",
        "description": "seconds :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      },
      {
        "name": "nanoseconds",
        "description": "nanoseconds :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "datetime.fromepochmillis",
    "category": "Temporal",
    "description": "Creates a `ZONED DATETIME` given the milliseconds since the start of the epoch.",
    "signature": "datetime.fromepochmillis(milliseconds :: INTEGER | FLOAT) :: ZONED DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "milliseconds",
        "description": "milliseconds :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "datetime.realtime",
    "category": "Temporal",
    "description": "Returns the current `ZONED DATETIME` instant using the realtime clock.",
    "signature": "datetime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "datetime.statement",
    "category": "Temporal",
    "description": "Returns the current `ZONED DATETIME` instant using the statement clock.",
    "signature": "datetime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "datetime.transaction",
    "category": "Temporal",
    "description": "Returns the current `ZONED DATETIME` instant using the transaction clock.",
    "signature": "datetime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "datetime.truncate",
    "category": "Temporal",
    "description": "Truncates the given temporal value to a `ZONED DATETIME` instant using the specified unit.",
    "signature": "datetime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: ZONED DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "unit",
        "description": "unit :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=null, type=MAP}",
        "name": "fields",
        "description": "fields = null :: MAP",
        "type": "MAP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "db.nameFromElementId",
    "category": "Database",
    "description": "Resolves the database name for the given element id",
    "signature": "db.nameFromElementId(elementId :: STRING) :: STRING",
    "isBuiltIn": true,
    "enterpriseOnly": true,
    "argumentDescription": [
      {
        "name": "elementId",
        "description": "elementId :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "degrees",
    "category": "Trigonometric",
    "description": "Converts radians to degrees.",
    "signature": "degrees(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "duration",
    "category": "Temporal",
    "description": "Creates a `DURATION` value.",
    "signature": "duration(input :: ANY) :: DURATION",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DURATION",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "duration.between",
    "category": "Temporal",
    "description": "Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in logical units.",
    "signature": "duration.between(from :: ANY, to :: ANY) :: DURATION",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "from",
        "description": "from :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "to",
        "description": "to :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DURATION",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "duration.inDays",
    "category": "Temporal",
    "description": "Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in days.",
    "signature": "duration.inDays(from :: ANY, to :: ANY) :: DURATION",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "from",
        "description": "from :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "to",
        "description": "to :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DURATION",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "duration.inMonths",
    "category": "Temporal",
    "description": "Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in months.",
    "signature": "duration.inMonths(from :: ANY, to :: ANY) :: DURATION",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "from",
        "description": "from :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "to",
        "description": "to :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DURATION",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "duration.inSeconds",
    "category": "Temporal",
    "description": "Computes the `DURATION` between the `from` instant (inclusive) and the `to` instant (exclusive) in seconds.",
    "signature": "duration.inSeconds(from :: ANY, to :: ANY) :: DURATION",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "from",
        "description": "from :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "to",
        "description": "to :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "DURATION",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "e",
    "category": "Logarithmic",
    "description": "Returns the base of the natural logarithm, e.",
    "signature": "e() :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "elementId",
    "category": "Scalar",
    "description": "Returns the element id of a `NODE` or `RELATIONSHIP`.",
    "signature": "elementId(input :: NODE | RELATIONSHIP) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: NODE | RELATIONSHIP",
        "type": "NODE | RELATIONSHIP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "endNode",
    "category": "Scalar",
    "description": "Returns the end `NODE` of a `RELATIONSHIP`.",
    "signature": "endNode(input :: RELATIONSHIP) :: NODE",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: RELATIONSHIP",
        "type": "RELATIONSHIP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "NODE",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "exists",
    "category": "Predicate",
    "description": "Returns true if a match for the pattern exists in the graph.",
    "signature": "exists(input :: ANY) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "exp",
    "category": "Logarithmic",
    "description": "Returns e^n, where e is the base of the natural logarithm, and n is the value of the argument expression.",
    "signature": "exp(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "file",
    "category": "Scalar",
    "description": "Returns the absolute path of the file that LOAD CSV is using.",
    "signature": "file() :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "floor",
    "category": "Numeric",
    "description": "Returns the largest `FLOAT` that is less than or equal to a number and equal to an `INTEGER`.",
    "signature": "floor(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "graph.byElementId",
    "category": "Graph",
    "description": "Returns the graph reference with the given element id. It is only supported in the `USE` clause, on composite databases.",
    "signature": "graph.byElementId(elementId :: STRING) :: GRAPH",
    "isBuiltIn": true,
    "enterpriseOnly": false,
    "argumentDescription": [
      {
        "name": "elementId",
        "description": "elementId :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "GRAPH",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "graph.byName",
    "category": "Graph",
    "description": "Returns the graph reference of the given name. It is only supported in the `USE` clause, on composite databases.",
    "signature": "graph.byName(name :: STRING) :: GRAPH",
    "isBuiltIn": true,
    "enterpriseOnly": false,
    "argumentDescription": [
      {
        "name": "name",
        "description": "name :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "GRAPH",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "graph.names",
    "category": "Graph",
    "description": "Lists the names of graphs in the current database.",
    "signature": "graph.names() :: LIST<STRING>",
    "isBuiltIn": true,
    "enterpriseOnly": true,
    "argumentDescription": [],
    "returnDescription": "LIST<STRING>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "graph.propertiesByName",
    "category": "Graph",
    "description": "Returns the `MAP` of properties associated with a graph.",
    "signature": "graph.propertiesByName(graphName :: STRING) :: MAP",
    "isBuiltIn": true,
    "enterpriseOnly": true,
    "argumentDescription": [
      {
        "name": "graphName",
        "description": "graphName :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "MAP",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "haversin",
    "category": "Trigonometric",
    "description": "Returns half the versine of a number.",
    "signature": "haversin(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "head",
    "category": "Scalar",
    "description": "Returns the first element in a `LIST<ANY>`.",
    "signature": "head(list :: LIST<ANY>) :: ANY",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "list",
        "description": "list :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ANY",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "id",
    "category": "Scalar",
    "description": "Returns the id of a `NODE` or `RELATIONSHIP`.",
    "signature": "id(input :: NODE | RELATIONSHIP) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: NODE | RELATIONSHIP",
        "type": "NODE | RELATIONSHIP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": true
  },
  {
    "name": "isEmpty",
    "category": "Predicate",
    "description": "Checks whether a `STRING`, `MAP` or `LIST<ANY>` is empty.",
    "signature": "isEmpty(input :: STRING | MAP | LIST<ANY>) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING | MAP | LIST<ANY>",
        "type": "STRING | MAP | LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "isNaN",
    "category": "Numeric",
    "description": "Returns whether the given `INTEGER` or `FLOAT` is NaN.",
    "signature": "isNaN(input :: INTEGER | FLOAT) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "keys",
    "category": "List",
    "description": "Returns a `LIST<STRING>` containing the `STRING` representations for all the property names of a `NODE`, `RELATIONSHIP` or `MAP`.",
    "signature": "keys(input :: NODE | RELATIONSHIP | MAP) :: LIST<STRING>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: NODE | RELATIONSHIP | MAP",
        "type": "NODE | RELATIONSHIP | MAP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<STRING>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "labels",
    "category": "List",
    "description": "Returns a `LIST<STRING>` containing the `STRING` representations for all the labels of a `NODE`.",
    "signature": "labels(input :: NODE) :: LIST<STRING>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: NODE",
        "type": "NODE",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<STRING>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "last",
    "category": "Scalar",
    "description": "Returns the last element in a `LIST<ANY>`.",
    "signature": "last(list :: LIST<ANY>) :: ANY",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "list",
        "description": "list :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ANY",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "left",
    "category": "String",
    "description": "Returns a `STRING` containing the specified number (`INTEGER`) of leftmost characters in the given `STRING`.",
    "signature": "left(original :: STRING, length :: INTEGER) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "original",
        "description": "original :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "name": "length",
        "description": "length :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "length",
    "category": "Scalar",
    "description": "Returns the length of a `PATH`.",
    "signature": "length(input :: PATH) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: PATH",
        "type": "PATH",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "linenumber",
    "category": "Scalar",
    "description": "Returns the line number that LOAD CSV is currently using.",
    "signature": "linenumber() :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localdatetime",
    "category": "Temporal",
    "description": "Creates a `LOCAL DATETIME` instant.",
    "signature": "localdatetime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localdatetime.realtime",
    "category": "Temporal",
    "description": "Returns the current `LOCAL DATETIME` instant using the realtime clock.",
    "signature": "localdatetime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localdatetime.statement",
    "category": "Temporal",
    "description": "Returns the current `LOCAL DATETIME` instant using the statement clock.",
    "signature": "localdatetime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localdatetime.transaction",
    "category": "Temporal",
    "description": "Returns the current `LOCAL DATETIME` instant using the transaction clock.",
    "signature": "localdatetime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localdatetime.truncate",
    "category": "Temporal",
    "description": "Truncates the given temporal value to a `LOCAL DATETIME` instant using the specified unit.",
    "signature": "localdatetime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: LOCAL DATETIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "unit",
        "description": "unit :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=null, type=MAP}",
        "name": "fields",
        "description": "fields = null :: MAP",
        "type": "MAP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL DATETIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localtime",
    "category": "Temporal",
    "description": "Creates a `LOCAL TIME` instant.",
    "signature": "localtime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localtime.realtime",
    "category": "Temporal",
    "description": "Returns the current `LOCAL TIME` instant using the realtime clock.",
    "signature": "localtime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localtime.statement",
    "category": "Temporal",
    "description": "Returns the current `LOCAL TIME` instant using the statement clock.",
    "signature": "localtime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localtime.transaction",
    "category": "Temporal",
    "description": "Returns the current `LOCAL TIME` instant using the transaction clock.",
    "signature": "localtime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: LOCAL TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "localtime.truncate",
    "category": "Temporal",
    "description": "Truncates the given temporal value to a `LOCAL TIME` instant using the specified unit.",
    "signature": "localtime.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: LOCAL TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "unit",
        "description": "unit :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=null, type=MAP}",
        "name": "fields",
        "description": "fields = null :: MAP",
        "type": "MAP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LOCAL TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "log",
    "category": "Logarithmic",
    "description": "Returns the natural logarithm of a `FLOAT`.",
    "signature": "log(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "log10",
    "category": "Logarithmic",
    "description": "Returns the common logarithm (base 10) of a `FLOAT`.",
    "signature": "log10(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "ltrim",
    "category": "String",
    "description": "Returns the given `STRING` with leading whitespace removed.",
    "signature": "ltrim(input :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "ltrim",
    "category": "String",
    "description": "Returns the given `STRING` with leading `trimCharacterString` characters removed.",
    "signature": "ltrim(input :: STRING, trimCharacterString :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }, {
        "name" : "trimCharacterString",
        "description" : "trimCharacterString :: STRING",
        "isDeprecated" : false,
        "type" : "STRING"
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "max",
    "category": "Aggregating",
    "description": "Returns the maximum value in a set of values.",
    "signature": "max(input :: ANY) :: ANY",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ANY",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "min",
    "category": "Aggregating",
    "description": "Returns the minimum value in a set of values.",
    "signature": "min(input :: ANY) :: ANY",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ANY",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "nodes",
    "category": "List",
    "description": "Returns a `LIST<NODE>` containing all the `NODE` values in a `PATH`.",
    "signature": "nodes(input :: PATH) :: LIST<NODE>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: PATH",
        "type": "PATH",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<NODE>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "none",
    "category": "Predicate",
    "description": "Returns true if the predicate holds for no element in the given `LIST<ANY>`.",
    "signature": "none(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "variable",
        "description": "variable :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "list",
        "description": "list :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "normalize",
    "category": "String",
    "description": "Normalize a `STRING`. The `STRING` will be normalized using the normal form 'NFC'.",
    "signature": "normalize(input :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "normalize",
    "category": "String",
    "description": "Normalize a `STRING`. The `STRING` will be normalized according to the specified normalization form.",
    "signature": "normalize(input :: STRING, normalForm = NFC :: [NFC, NFD, NFKC, NFKD]) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "name": "normalForm",
        "description": "normalForm :: [NFC, NFD, NFKC, NFKD]",
        "type": "[NFC, NFD, NFKC, NFKD]",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "nullIf",
    "category": "Scalar",
    "description": "Returns null if the two given parameters are equivalent, otherwise returns the value of the first parameter.",
    "signature": "nullIf(v1 :: ANY, v2 :: ANY) :: ANY",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "v1",
        "description": "v1 :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "v2",
        "description": "v2 :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ANY",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "percentileCont",
    "category": "Aggregating",
    "description": "Returns the percentile of a value over a group using linear interpolation.",
    "signature": "percentileCont(input :: FLOAT, percentile :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      },
      {
        "name": "percentile",
        "description": "percentile :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "percentileDisc",
    "category": "Aggregating",
    "description": "Returns the nearest `INTEGER` or `FLOAT` value to the given percentile over a group using a rounding method.",
    "signature": "percentileDisc(input :: INTEGER | FLOAT, percentile :: FLOAT) :: INTEGER | FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      },
      {
        "name": "percentile",
        "description": "percentile :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER | FLOAT",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "pi",
    "category": "Trigonometric",
    "description": "Returns the mathematical constant pi.",
    "signature": "pi() :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "point",
    "category": "Spatial",
    "description": "Returns a 2D or 3D point object, given two or respectively three coordinate values in the Cartesian coordinate system or WGS 84 geographic coordinate system.",
    "signature": "point(input :: MAP) :: POINT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: MAP",
        "type": "MAP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "POINT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "point.distance",
    "category": "Spatial",
    "description": "Returns a `FLOAT` representing the geodesic distance between any two points in the same CRS.",
    "signature": "point.distance(from :: POINT, to :: POINT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "from",
        "description": "from :: POINT",
        "type": "POINT",
        "isDeprecated": false
      },
      {
        "name": "to",
        "description": "to :: POINT",
        "type": "POINT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "point.withinBBox",
    "category": "Spatial",
    "description": "Returns true if the provided point is within the bounding box defined by the two provided points.",
    "signature": "point.withinBBox(point :: POINT, lowerLeft :: POINT, upperRight :: POINT) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "point",
        "description": "point :: POINT",
        "type": "POINT",
        "isDeprecated": false
      },
      {
        "name": "lowerLeft",
        "description": "lowerLeft :: POINT",
        "type": "POINT",
        "isDeprecated": false
      },
      {
        "name": "upperRight",
        "description": "upperRight :: POINT",
        "type": "POINT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "properties",
    "category": "Scalar",
    "description": "Returns a `MAP` containing all the properties of a `NODE`, `RELATIONSHIP` or `MAP`.",
    "signature": "properties(input :: NODE | RELATIONSHIP | MAP) :: MAP",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: NODE | RELATIONSHIP | MAP",
        "type": "NODE | RELATIONSHIP | MAP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "MAP",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "radians",
    "category": "Trigonometric",
    "description": "Converts degrees to radians.",
    "signature": "radians(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "rand",
    "category": "Numeric",
    "description": "Returns a random `FLOAT` in the range from 0 (inclusive) to 1 (exclusive).",
    "signature": "rand() :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "randomUUID",
    "category": "Scalar",
    "description": "Generates a random UUID.",
    "signature": "randomUUID() :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "range",
    "category": "List",
    "description": "Returns a `LIST<INTEGER>` comprising all `INTEGER` values within a specified range.",
    "signature": "range(start :: INTEGER, end :: INTEGER) :: LIST<INTEGER>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "start",
        "description": "start :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      },
      {
        "name": "end",
        "description": "end :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<INTEGER>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "range",
    "category": "List",
    "description": "Returns a `LIST<INTEGER>` comprising all `INTEGER` values within a specified range created with step length.",
    "signature": "range(start :: INTEGER, end :: INTEGER, step :: INTEGER) :: LIST<INTEGER>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "start",
        "description": "start :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      },
      {
        "name": "end",
        "description": "end :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      },
      {
        "name": "step",
        "description": "step :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<INTEGER>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "reduce",
    "category": "List",
    "description": "Runs an expression against individual elements of a `LIST<ANY>`, storing the result of the expression in an accumulator.",
    "signature": "reduce(accumulator :: VARIABLE = initial :: ANY, variable :: VARIABLE IN list :: LIST<ANY> | expression :: ANY) :: ANY",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "accumulator",
        "description": "accumulator :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "variable",
        "description": "variable :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ANY",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "relationships",
    "category": "List",
    "description": "Returns a `LIST<RELATIONSHIP>` containing all the `RELATIONSHIP` values in a `PATH`.",
    "signature": "relationships(input :: PATH) :: LIST<RELATIONSHIP>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: PATH",
        "type": "PATH",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<RELATIONSHIP>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "replace",
    "category": "String",
    "description": "Returns a `STRING` in which all occurrences of a specified search `STRING` in the given `STRING` have been replaced by another (specified) replacement `STRING`.",
    "signature": "replace(original :: STRING, search :: STRING, replace :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "original",
        "description": "original :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "name": "search",
        "description": "search :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "name": "replace",
        "description": "replace :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "reverse",
    "category": "String",
    "description": "Returns a `STRING` or `LIST<ANY>` in which the order of all characters or elements in the given `STRING` or `LIST<ANY>` have been reversed.",
    "signature": "reverse(input :: STRING | LIST<ANY>) :: STRING | LIST<ANY>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING | LIST<ANY>",
        "type": "STRING | LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING | LIST<ANY>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "right",
    "category": "String",
    "description": "Returns a `STRING` containing the specified number of rightmost characters in the given `STRING`.",
    "signature": "right(original :: STRING, length :: INTEGER) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "original",
        "description": "original :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "name": "length",
        "description": "length :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "round",
    "category": "Numeric",
    "description": "Returns the value of a number rounded to the nearest `INTEGER`.",
    "signature": "round(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "round",
    "category": "Numeric",
    "description": "Returns the value of a number rounded to the specified precision using rounding mode HALF_UP.",
    "signature": "round(value :: FLOAT, precision :: INTEGER | FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "value",
        "description": "value :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      },
      {
        "name": "precision",
        "description": "precision :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "round",
    "category": "Numeric",
    "description": "Returns the value of a number rounded to the specified precision with the specified rounding mode.",
    "signature": "round(value :: FLOAT, precision :: INTEGER | FLOAT, mode :: STRING) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "value",
        "description": "value :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      },
      {
        "name": "precision",
        "description": "precision :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      },
      {
        "name": "mode",
        "description": "mode :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "rtrim",
    "category": "String",
    "description": "Returns the given `STRING` with trailing whitespace removed.",
    "signature": "rtrim(input :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "rtrim",
    "category": "String",
    "description": "Returns the given `STRING` with trailing `trimCharacterString` characters removed.",
    "signature": "rtrim(input :: STRING, trimCharacterString :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }, {
        "name" : "trimCharacterString",
        "description" : "trimCharacterString :: STRING",
        "isDeprecated" : false,
        "type" : "STRING"
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "sign",
    "category": "Numeric",
    "description": "Returns the signum of an `INTEGER` or `FLOAT`: 0 if the number is 0, -1 for any negative number, and 1 for any positive number.",
    "signature": "sign(input :: INTEGER | FLOAT) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: INTEGER | FLOAT",
        "type": "INTEGER | FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "sin",
    "category": "Trigonometric",
    "description": "Returns the sine of a `FLOAT`.",
    "signature": "sin(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "single",
    "category": "Predicate",
    "description": "Returns true if the predicate holds for exactly one of the elements in the given `LIST<ANY>`.",
    "signature": "single(variable :: VARIABLE IN list :: LIST<ANY> WHERE predicate :: ANY) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "variable",
        "description": "variable :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "name": "list",
        "description": "list :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "size",
    "category": "Scalar",
    "description": "Returns the number of items in a `LIST<ANY>` or the number of Unicode characters in a `STRING`.",
    "signature": "size(input :: STRING | LIST<ANY>) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING | LIST<ANY>",
        "type": "STRING | LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "split",
    "category": "String",
    "description": "Returns a `LIST<STRING>` resulting from the splitting of the given `STRING` around matches of the given delimiter(s).",
    "signature": "split(original :: STRING, splitDelimiters :: STRING | LIST<STRING>) :: LIST<STRING>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "original",
        "description": "original :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "name": "splitDelimiters",
        "description": "splitDelimiters :: STRING | LIST<STRING>",
        "type": "STRING | LIST<STRING>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<STRING>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "sqrt",
    "category": "Logarithmic",
    "description": "Returns the square root of a `FLOAT`.",
    "signature": "sqrt(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "startNode",
    "category": "Scalar",
    "description": "Returns the start `NODE` of a `RELATIONSHIP`.",
    "signature": "startNode(input :: RELATIONSHIP) :: NODE",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: RELATIONSHIP",
        "type": "RELATIONSHIP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "NODE",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "stdev",
    "category": "Aggregating",
    "description": "Returns the standard deviation for the given value over a group for a sample of a population.",
    "signature": "stdev(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "stdevp",
    "category": "Aggregating",
    "description": "Returns the standard deviation for the given value over a group for an entire population.",
    "signature": "stdevp(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "substring",
    "category": "String",
    "description": "Returns a substring of the given `STRING`, beginning with a 0-based index start.",
    "signature": "substring(original :: STRING, start :: INTEGER) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "original",
        "description": "original :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "name": "start",
        "description": "start :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "substring",
    "category": "String",
    "description": "Returns a substring of a given `length` from the given `STRING`, beginning with a 0-based index start.",
    "signature": "substring(original :: STRING, start :: INTEGER, length :: INTEGER) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "original",
        "description": "original :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "name": "start",
        "description": "start :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      },
      {
        "name": "length",
        "description": "length :: INTEGER",
        "type": "INTEGER",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "sum",
    "category": "Aggregating",
    "description": "Returns the sum of a set of `INTEGER`, `FLOAT` or `DURATION` values",
    "signature": "sum(input :: INTEGER | FLOAT | DURATION) :: INTEGER | FLOAT | DURATION",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: INTEGER | FLOAT | DURATION",
        "type": "INTEGER | FLOAT | DURATION",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER | FLOAT | DURATION",
    "aggregating": true,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "tail",
    "category": "List",
    "description": "Returns all but the first element in a `LIST<ANY>`.",
    "signature": "tail(input :: LIST<ANY>) :: LIST<ANY>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<ANY>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "tan",
    "category": "Trigonometric",
    "description": "Returns the tangent of a `FLOAT`.",
    "signature": "tan(input :: FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: FLOAT",
        "type": "FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "time",
    "category": "Temporal",
    "description": "Creates a `ZONED TIME` instant.",
    "signature": "time(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "time.realtime",
    "category": "Temporal",
    "description": "Returns the current `ZONED TIME` instant using the realtime clock.",
    "signature": "time.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "time.statement",
    "category": "Temporal",
    "description": "Returns the current `ZONED TIME` instant using the statement clock.",
    "signature": "time.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "time.transaction",
    "category": "Temporal",
    "description": "Returns the current `ZONED TIME` instant using the transaction clock.",
    "signature": "time.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY) :: ZONED TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "timezone",
        "description": "timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "time.truncate",
    "category": "Temporal",
    "description": "Truncates the given temporal value to a `ZONED TIME` instant using the specified unit.",
    "signature": "time.truncate(unit :: STRING, input = DEFAULT_TEMPORAL_ARGUMENT :: ANY, fields = null :: MAP) :: ZONED TIME",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "unit",
        "description": "unit :: STRING",
        "type": "STRING",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=DEFAULT_TEMPORAL_ARGUMENT, type=ANY}",
        "name": "input",
        "description": "input = DEFAULT_TEMPORAL_ARGUMENT :: ANY",
        "type": "ANY",
        "isDeprecated": false
      },
      {
        "default": "DefaultParameterValue{value=null, type=MAP}",
        "name": "fields",
        "description": "fields = null :: MAP",
        "type": "MAP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "ZONED TIME",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "timestamp",
    "category": "Scalar",
    "description": "Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC",
    "signature": "timestamp() :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toBoolean",
    "category": "Scalar",
    "description": "Converts a `BOOLEAN`, `STRING` or `INTEGER` value to a `BOOLEAN` value. For `INTEGER` values, 0 is defined to be false and any other `INTEGER` is defined to be true.",
    "signature": "toBoolean(input :: BOOLEAN | STRING | INTEGER) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: BOOLEAN | STRING | INTEGER",
        "type": "BOOLEAN | STRING | INTEGER",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toBooleanList",
    "category": "List",
    "description": "Converts a `LIST<ANY>` of values to a `LIST<BOOLEAN>` values. If any values are not convertible to `BOOLEAN` they will be null in the `LIST<BOOLEAN>` returned.",
    "signature": "toBooleanList(input :: LIST<ANY>) :: LIST<BOOLEAN>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<BOOLEAN>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toBooleanOrNull",
    "category": "Scalar",
    "description": "Converts a value to a `BOOLEAN` value, or null if the value cannot be converted.",
    "signature": "toBooleanOrNull(input :: ANY) :: BOOLEAN",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "BOOLEAN",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toFloat",
    "category": "Scalar",
    "description": "Converts a `STRING`, `INTEGER` or `FLOAT` value to a `FLOAT` value.",
    "signature": "toFloat(input :: STRING | INTEGER | FLOAT) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING | INTEGER | FLOAT",
        "type": "STRING | INTEGER | FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toFloatList",
    "category": "List",
    "description": "Converts a `LIST<ANY>` to a `LIST<FLOAT>` values. If any values are not convertible to `FLOAT` they will be null in the `LIST<FLOAT>` returned.",
    "signature": "toFloatList(input :: LIST<ANY>) :: LIST<FLOAT>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<FLOAT>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toFloatOrNull",
    "category": "Scalar",
    "description": "Converts a value to a `FLOAT` value, or null if the value cannot be converted.",
    "signature": "toFloatOrNull(input :: ANY) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toInteger",
    "category": "Scalar",
    "description": "Converts a `BOOLEAN`, `STRING`, `INTEGER` or `FLOAT` value to an `INTEGER` value. For `BOOLEAN` values, true is defined to be 1 and false is defined to be 0.",
    "signature": "toInteger(input :: BOOLEAN | STRING | INTEGER | FLOAT) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: BOOLEAN | STRING | INTEGER | FLOAT",
        "type": "BOOLEAN | STRING | INTEGER | FLOAT",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toIntegerList",
    "category": "List",
    "description": "Converts a `LIST<ANY>` to a `LIST<INTEGER>` values. If any values are not convertible to `INTEGER` they will be null in the `LIST<INTEGER>` returned.",
    "signature": "toIntegerList(input :: LIST<ANY>) :: LIST<INTEGER>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<INTEGER>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toIntegerOrNull",
    "category": "Scalar",
    "description": "Converts a value to an `INTEGER` value, or null if the value cannot be converted.",
    "signature": "toIntegerOrNull(input :: ANY) :: INTEGER",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "INTEGER",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toLower",
    "category": "String",
    "description": "Returns the given `STRING` in lowercase.",
    "signature": "toLower(input :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toString",
    "category": "String",
    "description": "Converts an `INTEGER`, `FLOAT`, `BOOLEAN`, `POINT` or temporal type (i.e. `DATE`, `ZONED TIME`, `LOCAL TIME`, `ZONED DATETIME`, `LOCAL DATETIME` or `DURATION`) value to a `STRING`.",
    "signature": "toString(input :: ANY) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toStringList",
    "category": "List",
    "description": "Converts a `LIST<ANY>` to a `LIST<STRING>` values. If any values are not convertible to `STRING` they will be null in the `LIST<STRING>` returned.",
    "signature": "toStringList(input :: LIST<ANY>) :: LIST<STRING>",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: LIST<ANY>",
        "type": "LIST<ANY>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "LIST<STRING>",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toStringOrNull",
    "category": "String",
    "description": "Converts an `INTEGER`, `FLOAT`, `BOOLEAN`, `POINT` or temporal type (i.e. `DATE`, `ZONED TIME`, `LOCAL TIME`, `ZONED DATETIME`, `LOCAL DATETIME` or `DURATION`) value to a `STRING`, or null if the value cannot be converted.",
    "signature": "toStringOrNull(input :: ANY) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "toUpper",
    "category": "String",
    "description": "Returns the given `STRING` in uppercase.",
    "signature": "toUpper(input :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "trim",
    "category": "String",
    "description": "Returns the given `STRING` with leading and trailing whitespace removed.",
    "signature": "trim(input :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [ {
        "name" : "trimSpecification",
        "description" : "trimSpecification :: [LEADING, TRAILING, BOTH]",
        "isDeprecated" : false,
        "type" : "[LEADING, TRAILING, BOTH]"
      },
      {
        "name": "input",
        "description": "input :: STRING",
        "type": "STRING",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "trim",
    "category": "String",
    "description": "Returns the given `STRING` with leading and/or trailing `trimCharacterString` removed.",
    "signature": "trim([[LEADING | TRAILING | BOTH] [trimCharacterString :: STRING] FROM] input :: STRING) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [ {
      "name" : "trimSpecification",
      "description" : "trimSpecification :: [LEADING, TRAILING, BOTH]",
      "isDeprecated" : false,
      "type" : "[LEADING, TRAILING, BOTH]"
    }, {
      "name" : "trimCharacterString",
      "description" : "trimCharacterString :: STRING",
      "isDeprecated" : false,
      "type" : "STRING"
    }, {
      "name" : "input",
      "description" : "input :: STRING",
      "isDeprecated" : false,
      "type" : "STRING"
    }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "type",
    "category": "Scalar",
    "description": "Returns a `STRING` representation of the `RELATIONSHIP` type.",
    "signature": "type(input :: RELATIONSHIP) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: RELATIONSHIP",
        "type": "RELATIONSHIP",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "valueType",
    "category": "Scalar",
    "description": "Returns a `STRING` representation of the most precise value type that the given expression evaluates to.",
    "signature": "valueType(input :: ANY) :: STRING",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "input",
        "description": "input :: ANY",
        "type": "ANY",
        "isDeprecated": false
      }
    ],
    "returnDescription": "STRING",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "vector.similarity.cosine",
    "category": "Vector",
    "description": "Returns a `FLOAT` representing the similarity between the argument vectors based on their cosine.",
    "signature": "vector.similarity.cosine(a :: LIST<INTEGER | FLOAT>, b :: LIST<INTEGER | FLOAT>) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "a",
        "description": "a :: LIST<INTEGER | FLOAT>",
        "type": "LIST<INTEGER | FLOAT>",
        "isDeprecated": false
      },
      {
        "name": "b",
        "description": "b :: LIST<INTEGER | FLOAT>",
        "type": "LIST<INTEGER | FLOAT>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  },
  {
    "name": "vector.similarity.euclidean",
    "category": "Vector",
    "description": "Returns a `FLOAT` representing the similarity between the argument vectors based on their Euclidean distance.",
    "signature": "vector.similarity.euclidean(a :: LIST<INTEGER | FLOAT>, b :: LIST<INTEGER | FLOAT>) :: FLOAT",
    "isBuiltIn": true,
    "argumentDescription": [
      {
        "name": "a",
        "description": "a :: LIST<INTEGER | FLOAT>",
        "type": "LIST<INTEGER | FLOAT>",
        "isDeprecated": false
      },
      {
        "name": "b",
        "description": "b :: LIST<INTEGER | FLOAT>",
        "type": "LIST<INTEGER | FLOAT>",
        "isDeprecated": false
      }
    ],
    "returnDescription": "FLOAT",
    "aggregating": false,
    "rolesExecution": [
      "PUBLIC",
      "admin",
      "architect",
      "editor",
      "publisher",
      "reader"
    ],
    "rolesBoostedExecution": [],
    "isDeprecated": false
  }
]
